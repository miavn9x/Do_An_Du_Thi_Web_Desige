import React, { useEffect, useState, useCallback } from "react";
import axios from "axios";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  LineChart,
  Line,
} from "recharts";

const Dashboard = () => {
  const [orderStats, setOrderStats] = useState([]);
  const [inventoryStats, setInventoryStats] = useState([]);
  const [selectedPeriod, setSelectedPeriod] = useState("day");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // H√†m l·∫•y th·ªëng k√™ ƒë∆°n h√†ng
  const fetchOrderStats = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      console.log("üîç G·ªçi API /api/order-stats");
      const token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage
      const response = await axios.get(
        `/api/order-stats?period=${selectedPeriod}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      console.log("‚úÖ Ph·∫£n h·ªìi API order-stats:", response.data);

      if (response.data && response.data.orderStats) {
        setOrderStats([
          { name: "ƒêang x·ª≠ l√Ω", orders: response.data.orderStats.processing },
          { name: "ƒê√£ x√°c nh·∫≠n", orders: response.data.orderStats.confirmed },
          { name: "ƒêang giao h√†ng", orders: response.data.orderStats.shipping },
          { name: "ƒê√£ giao h√†ng", orders: response.data.orderStats.delivered },
          // B·ªè "ƒê√£ h·ªßy" n·∫øu API kh√¥ng cung c·∫•p
        ]);
      } else {
        console.error(
          "‚ùå API order-stats tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:",
          response.data
        );
        setOrderStats([]);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y th·ªëng k√™ ƒë∆°n h√†ng:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë∆°n h√†ng.");
      setOrderStats([]);
    } finally {
      setLoading(false);
    }
  }, [selectedPeriod]);

  // H√†m l·∫•y th·ªëng k√™ h√†ng t·ªìn kho
  const fetchInventoryStats = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      console.log("üîç G·ªçi API /api/inventory/stats");
      const response = await axios.get(
        `/api/inventory/stats?period=${selectedPeriod}`
      );

      console.log("‚úÖ Ph·∫£n h·ªìi API inventory-stats:", response.data);

      if (response.data && response.data.sales?.length) {
        setInventoryStats(
          response.data.sales.map((item) => ({
            name: item._id,
            sold: item.totalSold,
          }))
        );
      } else {
        console.error(
          "‚ùå API inventory-stats tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:",
          response.data
        );
        setInventoryStats([]);
      }
    } catch (error) {
      console.error("‚ùå L·ªói API fetchInventoryStats:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kho h√†ng.");
      setInventoryStats([]);
    } finally {
      setLoading(false);
    }
  }, [selectedPeriod]);

  // G·ªçi API m·ªói khi `selectedPeriod` thay ƒë·ªïi
  useEffect(() => {
    fetchOrderStats();
    fetchInventoryStats();
  }, [fetchOrderStats, fetchInventoryStats]);

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-6xl mx-auto bg-white shadow-lg rounded-lg p-6">
        <h1 className="text-2xl font-bold mb-4">üìä B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n l√Ω</h1>

        {/* B·ªô l·ªçc th·ªùi gian */}
        <div className="mb-4">
          <label className="font-semibold">Th·ªëng k√™ theo: </label>
          <select
            value={selectedPeriod}
            onChange={(e) => setSelectedPeriod(e.target.value)}
            className="border p-2 rounded"
          >
            <option value="day">Ng√†y</option>
            <option value="week">Tu·∫ßn</option>
            <option value="month">Th√°ng</option>
          </select>
        </div>

        {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
        {error && <p className="text-red-500">{error}</p>}

        {/* Bi·ªÉu ƒë·ªì ƒë∆°n h√†ng */}
        <div className="bg-gray-50 p-4 rounded-lg shadow-md mb-6">
          <h2 className="text-lg font-semibold mb-2">
            üì¶ Tr·∫°ng th√°i ƒë∆°n h√†ng ({selectedPeriod})
          </h2>
          {loading ? (
            <p className="text-gray-500">ƒêang t·∫£i...</p>
          ) : orderStats.length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={orderStats}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="orders" fill="#4F46E5" />
              </BarChart>
            </ResponsiveContainer>
          ) : (
            <p className="text-gray-500">Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n h√†ng.</p>
          )}
        </div>

        {/* Bi·ªÉu ƒë·ªì h√†ng t·ªìn kho */}
        <div className="bg-gray-50 p-4 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold mb-2">
            üìä S·∫£n ph·∫©m b√°n ch·∫°y ({selectedPeriod})
          </h2>
          {loading ? (
            <p className="text-gray-500">ƒêang t·∫£i...</p>
          ) : inventoryStats.length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={inventoryStats}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="sold" stroke="#F43F5E" />
              </LineChart>
            </ResponsiveContainer>
          ) : (
            <p className="text-gray-500">Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
